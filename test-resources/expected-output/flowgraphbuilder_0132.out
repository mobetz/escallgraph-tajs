fg2: <main> function()
  block 0: [entry]
    node 0: constant[undefined,v1] (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js)
    node 1: function-decl[function PB(c,dgg),-]* (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:1:1)
    ->[block 1]
  block 1:
    node 2: constant["tajs-host-env:string-replace-model.js",v2] (host-environment-sources-loader)
    node 3: constant[true,v3] (host-environment-sources-loader)
    ->[block 2]
  block 2:
    node 4: call[TAJS_load,v2,v3,v4] (host-environment-sources-loader)
    ->[block 3]
  block 3:
    node 5: call[-,v4,-] (host-environment-sources-loader)
    ->[block 4]
  block 4:
    node 6: read-variable['PB',v6,v5] (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:7:1)
    node 7: constant[1.0,v7] (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:7:4)
    node 8: constant[2.0,v8] (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:7:7)
    ->[block 5]
  block 5:
    node 9: call[v5,v6,v7,v8,-]* (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:7:1)
    ->[block 6]
  block 6: [exit-ordinary]
    node 10: return[v1] (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js)
    ->[]
  block 7: [exit-exceptional]
    node 11: exceptional-return (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js)
    ->[]
function PB(c,dgg)
  block 8: [entry]
    node 12: constant[undefined,v1] (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:1:1)
    node 13: vardecl['dgg']* (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:3:13)
    ->[block 9]
  block 9:
    node 14: typeof['dgg',v3] (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:2:10)
    node 15: constant["undefined",v4] (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:2:26)
    node 16: ==[v3,v4,v2] (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:2:10)
    ->[block 10]
  block 10:
    node 17: if[v2](true-block:14,false-block:11) (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:2:9)
    ->[block 11,block 14]
  block 11:
    node 18: read-variable['dgg',v5,-] (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:2:44)
    node 19: ![v5,v2] (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:2:43)
    ->[block 12]
  block 12:
    node 20: if[v2](true-block:14,false-block:13) (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:2:9)
    ->[block 13,block 14]
  block 13:
    node 21: read-variable['dgg',v6,-] (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:2:53)
    node 22: constant["undefined",v7] (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:2:60)
    node 23: ==[v6,v7,v2] (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:2:53)
    node 24: if[v2](true-block:14,false-block:15)* (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:2:5)
    ->[block 14,block 15]
  block 14:
    node 25: constant["self.",v8] (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:3:19)
    node 26: write-variable[v8,'dgg']* (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:3:13)
    ->[block 15]
  block 15: [exit-ordinary]
    node 27: return[v1] (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:1:1)
    ->[]
  block 16: [exit-exceptional]
    node 28: exceptional-return (test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:1:1)
    ->[]

test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:2:5: [definite] The conditional expression is always false
test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:2:9: [definite] The conditional expression is always false
test-resources/src/flowgraphbuilder/flowgraph_builder0132.js: [definite] Exceptional program exit is unreachable
test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:1:1: [definite] The variable c is never used
test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:3:13: [definite] The variable declaration dgg shadows a parameter
test-resources/src/flowgraphbuilder/flowgraph_builder0132.js:2:53: [maybe] Conversion from string to number yields NaN
Soundness testing succeeded for 14 checks (with 0 expected failures)
